/**
OpenAI API Chat Completions

Standards: https://platform.openai.com/docs/api-reference/completions
*/
module openai.chat;

import mir.algebraic;
import mir.serde;
import std.math;

import openai.common;
import openai.completion : CompletionUsage;

@safe:

struct ChatMessageFunctionCall
{
    /**
     * The name of the function to call.
     */
    @serdeOptional
    @serdeIgnoreDefault
    string name;

    /**
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     */
    @serdeOptional
    @serdeIgnoreDefault
    string arguments;
}

struct CreateChatCompletionRequestFunctionCallOneOf
{
    string name;
}

/// "none" or "auto" or `{ name: "my_function" }`
alias CreateChatCompletionRequestFunctionCall = Algebraic!(typeof(null), CreateChatCompletionRequestFunctionCallOneOf, string);

///
struct ChatCompletionFunction
{
    /**
     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
     */
    string name;

    /**
     * The description of what the function does.
     */
    string description;

    /**
     * The parameters the functions accepts, described as a JSON Schema object.
     */
    JsonValue parameters;
}

///
struct ChatMessage
{
    /// **Required**
    string role;

    /// **Required**
    string content;

    /// Optional
    @serdeOptional
    @serdeIgnoreDefault
    string name = null;

    /// Optional
    @serdeKeys("function_call")
    @serdeOptional
    @serdeIgnoreDefault
    Nullable!ChatMessageFunctionCall functionCall = null;
}

///
ChatMessage systemChatMessage(string content, string name = null)
{
    return ChatMessage("system", content, name);
}

///
ChatMessage userChatMessage(string content, string name = null)
{
    return ChatMessage("user", content, name);
}

///
ChatMessage assitantChatMessage(string content, string name = null)
{
    return ChatMessage("assistant", content, name);
}

///
ChatMessage functionChatMessage(string functionName, string functionResponseJson)
{
    return ChatMessage("function", functionResponseJson, functionName);
}

///
struct ChatCompletionRequest
{
    ///
    @serdeIgnoreDefault
    string model;

    ///
    ChatMessage[] messages;

    ///
    @serdeIgnoreDefault
    ChatCompletionFunction[] functions = null;

    ///
    @serdeIgnoreDefault
    @serdeKeys("function_call")
    CreateChatCompletionRequestFunctionCall functionCall = null;

    ///
    @serdeIgnoreDefault
    @serdeKeys("max_tokens")
    uint maxTokens = 16;

    ///
    @serdeIgnoreDefault
    double temperature = 1;

    ///
    @serdeIgnoreDefault
    double topP = 1;

    ///
    @serdeIgnoreDefault
    uint n = 1;

    ///
    @serdeIgnoreDefault
    bool stream = false;

    ///
    @serdeIgnoreDefault
    bool echo = false;

    ///
    @serdeIgnoreDefault
    StopToken stop = null;

    ///
    @serdeIgnoreDefault
    @serdeIgnoreOutIf!isNaN double presencePenalty = 0;

    ///
    @serdeIgnoreDefault
    double frequencyPenalty = 0;

    ///
    @serdeIgnoreDefault
    uint bestOf = 1;
    version (none)
    {
        ///
        @serdeIgnoreDefault
        double[string] logitBias; // TODO test
    }

    ///
    @serdeIgnoreDefault
    string user = null;
}

///
ChatCompletionRequest chatCompletionRequest(return scope string model, return scope ChatMessage[] messages, uint maxTokens, double temperature)
{
    auto request = ChatCompletionRequest();
    request.model = model;
    request.messages = messages;
    request.maxTokens = maxTokens;
    request.temperature = temperature;
    return request;
}

///
struct ChatChoice
{
    ///
    size_t index;

    ///
    ChatMessage message;

    ///
    @serdeKeys("finish_reason")
    string finishReason;
}

///
struct ChatCompletionResponse
{
    ///
    string id;

    ///
    string object;

    ///
    ulong created;

    ///
    string model;

    ///
    ChatChoice[] choices;

    ///
    CompletionUsage usage;
}
